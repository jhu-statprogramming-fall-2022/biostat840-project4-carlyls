current_wd <- getwd()
if (file.exists("data")) {
setwd(file.path(current_wd, "data"))
} else {
dir.create(file.path(current_wd, "data"))
setwd(file.path(current_wd, "data"))
}
if (file.exists("horror_films.csv")) {
horror_films <- readr::read_csv("horror_films.csv")
} else {
horror_films <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-22/horror_movies.csv")
readr::write_csv(horror_films, "horror_films.csv")
}
View(horror_films)
nrow(horror_films)
head(horror_films)
names(horror_films)
names(horror_films) <- c("Title","Genres","Release Date","Release Country",
"Rating","Review","Run Time","Plot","Cast","Language",
"Filming Locations","Budget")
names(horror_films) <- c("Title","Genres","Release Date","Release Country",
"Rating","Review","Run Time","Plot","Cast","Language",
"Filming Locations","Budget")
DT::renderDataTable({
DT::datatable(horror_films,
options = list(autoWidth = TRUE,
pageLength = 10,
scroller = TRUE,
scrollY = '450px'))
})
datatable(horror_films)
DT::datatable(horror_films)
DT_table <- horror_films %>%
select(-c(Plot, Cast, Language))
DT_table <- horror_films %>%
select(-c(Plot, Cast, Language))
library(flexdashboard)
library(tidyverse)
library(lubridate)
library(rpart)
library(rsample)
library(rpart.plot)
DT_table <- horror_films %>%
select(-c(Plot, Cast, Language))
names(DT_table) <- c("Title","Genres","Release Date","Release Country",
"Rating","Review","Run Time","Filming Locations","Budget")
DT_table
DT_table <- horror_films %>%
select(-c(Plot, Cast, Language))
ncol(DT_table)
head(horror_films)
head(horror_rel)
current_wd <- getwd()
if (file.exists("data")) {
setwd(file.path(current_wd, "data"))
} else {
dir.create(file.path(current_wd, "data"))
setwd(file.path(current_wd, "data"))
}
if (file.exists("horror_films.csv")) {
horror_films <- readr::read_csv("horror_films.csv")
} else {
horror_films <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-10-22/horror_movies.csv")
readr::write_csv(horror_films, "horror_films.csv")
}
DT_table <- horror_films %>%
select(-c(plot, cast, language))
names(DT_table) <- c("Title","Genres","Release Date","Release Country",
"Rating","Review","Run Time","Filming Locations","Budget")
DT::renderDataTable({
DT::datatable(DT_table,
caption = "Glimpse of the data",
options = list(autoWidth = TRUE,
pageLength = 10,
scroller = TRUE,
scrollY = '450px'))
})
horror_rel <- horror_films %>%
filter(is.na(review_rating)==F) %>%
mutate(release_year = ifelse(release_date %in% c("2012","2013","2014",
"2015","2016","2017"),
release_date,
year(dmy(release_date))),
release_year = as.numeric(release_year),
release_country = factor(ifelse(release_country == "USA", "USA", "Other")),
genre_thriller = ifelse(str_detect(genres, "Thriller"), 1, 0),
genre_drama = ifelse(str_detect(genres, "Drama"), 1, 0),
genre_comedy = ifelse(str_detect(genres, "Comedy"), 1, 0),
genre_mystery = ifelse(str_detect(genres, "Mystery"), 1, 0),
movie_run_time = str_remove(movie_run_time, " min"),
movie_run_time = as.numeric(movie_run_time))
head(horror_rel)
selectInput("year", label = "Year:",
choices = c(2012, 2013, 2014, 2015, 2016, 2017), selected = 2012)
??selectInput
library(shiny)
selectInput("year", label = "Year:",
choices = c(2012, 2013, 2014, 2015, 2016, 2017), selected = 2012)
ggplot(horror_rel, aes(x=review_rating)) +
geom_histogram()
input$year
summary(horror_rel$release_year)
View(horror_rel)
us <- filter(horror_rel, release_country=="USA")
unique(us$budget)
str_detect("$", horror_rel$budget)
?str_detect
str_detect("$", horror_rel$budget)==T %>% sum()
sum(str_detect(horror_rel$budget, "$"))
sum(str_detect(horror_rel$budget, "$"),na.rm=T)
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
ggplot(aes(x=movie_run_time, y=budget)) +
geom_point()
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
ggplot(aes(x=movie_run_time, y=budget)) +
geom_point()
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
mutate(budget = as.numeric(budget))
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
mutate(budget = as.numeric(budget)) %>% select(budget)
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
mutate(budget = as.numeric(budget)) %>% select(budget) %>% sum(na.rm=T)
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
mutate(budget = str_remove("$"),
budget = as.numeric(budget)) %>% select(budget) %>% View()
?STR_REMOVE
?str_remove
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
mutate(budget = str_remove("$"),
budget = as.numeric(budget)) %>% select(budget) %>% View()
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
mutate(budget = str_remove(budget, "$"),
budget = as.numeric(budget)) %>% View()
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
mutate(budget2 = parse_number(budget)) %>%
select(budget, budget2) %>% View()
horror_rel %>%
filter(str_detect(budget, "$")==T) %>%
#mutate(budget2 = parse_number(budget)) %>%
select(budget, budget2) %>% View()
horror_rel %>%
filter(str_detect(budget, "$")==T) %>% select(budget) %>% View()
horror_rel$budget
horror_rel$budget %>% typeof()
str_detect(horror_rel$budget, "$")
str_detect(horror_rel$budget, "'$'")
str_detect(horror_rel$budget, '$')
str_detect(horror_rel$budget, '\$')
str_detect(horror_rel$budget, "\$")
str_detect(horror_rel$budget, "^\$(\d{1,3}(\,\d{3})*|(\d+))?$")
a <- "$2"
grepl("$",a)
a <- c("$2","Â£100,000")
grepl("$",a)
grepl("\$",a)
grepl('\$',a)
grepl('\\$',a)
horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%select(budget) %>% View()
horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget2 = parse_number(budget)) %>%
select(budget, budget2) %>% View()
horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget = parse_number(budget)) %>%
ggplot(aes(x=movie_run_time, y=budget)) +
geom_point()
horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget = parse_number(budget)) %>% nrow()
horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget = parse_number(budget)) %>%
ggplot(aes(x=review_rating, y=budget)) +
geom_point()
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget = parse_number(budget)) %>%
arrange(desc(budget))
top_budgets
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget = parse_number(budget)) %>%
arrange(desc(budget)) %>%
select(titles, budget, genres:movie_rating, movie_run_time, plot, cast)
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget = parse_number(budget)) %>%
arrange(desc(budget)) %>%
select(title, budget, genres:movie_rating, movie_run_time, plot, cast)
top_budgets
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget = parse_number(budget)) %>%
arrange(desc(budget)) %>%
select(title, budget, genres:movie_rating, movie_run_time, plot, cast)
names(top_budgets) <- c("Title","Budget","Genres","Release Date","Release Country",
"Rating","Run Time","Plot","Cast")
?slice
quantile(horror_rel$budget)
quantile(top_budgets$budget)
quantile(top_budgets$budget,na.rm=T)
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget = parse_number(budget)) %>%
arrange(desc(budget)) %>%
select(title, budget, genres:movie_rating, movie_run_time, plot, cast)
quantile(top_budgets$budget,na.rm=T)
quantile(top_budgets$budget,na.rm=T)/100
quantile(top_budgets$budget,na.rm=T)/1000
top_budgets$budget
paste("$",format(1900000, big.mark=","),sep="")
?format
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget2 = parse_number(budget)) %>%
arrange(desc(budget2)) %>%
filter(budget2 >= top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget2 = parse_number(budget)) %>%
arrange(desc(budget2)))
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget2 = parse_number(budget)) %>%
arrange(desc(budget2))
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget2 = parse_number(budget)) %>%
arrange(desc(budget2)) %>%
filter(budget2 >= 1*1000000)
top_budgets
top_budgets <- horror_rel %>%
filter(str_detect(budget, "\\$")==T) %>%
mutate(budget2 = parse_number(budget)) %>%
arrange(desc(budget2)) %>%
select(title, budget, genres:movie_rating, movie_run_time, plot, cast, budget2)
names(top_budgets) <- c("Title","Budget","Genres","Release Date","Release Country",
"Rating","Run Time","Plot","Cast","NumBudg")
top_budgets
pattern_detect <- function(pattern) {
setNames(data.frame(sum(str_detect(horror_films$genres, pattern))), pattern)
}
genre <- map_dfc(.x=c("Drama","Romance","Comedy","Horror","Mystery",
"Thriller","Fantasy","War","Action","Adventure",
"Sci-Fi"),
.f=pattern_detect)
genre_t <- t(genre) %>% data.frame()
names(genre_t) <- "Number"
genre_t
genre
head(horror_films)
?map_dfc
pattern_detect <- function(pattern) {
setNames(data.frame(sum(str_detect(horror_films$genres, pattern))), pattern)
}
genre <- purrr::map_dfc(.x=c("Drama","Romance","Comedy","Horror","Mystery",
"Thriller","Fantasy","War","Action","Adventure",
"Sci-Fi"),
.f=pattern_detect)
genre
head(horror_films)
?setNames
pattern_detect <- function(pattern) {
setNames(data.frame(sum(str_detect(horror_films$genres, pattern))), pattern)
}
pattern_detect("Drama")
str_detect(horror_films$genres,"Drama")
data.frame(sum(str_detect(horror_films$genres, "Drama")))
sum(str_detect(horror_films$genres, "Drama"))
pattern_detect <- function(pattern) {
setNames(data.frame(sum(str_detect(horror_films$genres, pattern)),na.rm=T), pattern)
}
genre <- purrr::map_dfc(.x=c("Drama","Romance","Comedy","Horror","Mystery",
"Thriller","Fantasy","War","Action","Adventure",
"Sci-Fi"),
.f=pattern_detect)
genre
pattern_detect <- function(pattern) {
setNames(data.frame(sum(str_detect(horror_films$genres, pattern)),na.rm=T), pattern)
}
pattern_detect("Drama")
pattern_detect <- function(pattern) {
setNames(data.frame(sum(str_detect(horror_films$genres, pattern),na.rm=T)), pattern)
}
pattern_detect("Drama")
pattern_detect <- function(pattern) {
setNames(data.frame(sum(str_detect(horror_films$genres, pattern),na.rm=T)), pattern)
}
genre <- purrr::map_dfc(.x=c("Drama","Romance","Comedy","Horror","Mystery",
"Thriller","Fantasy","War","Action","Adventure",
"Sci-Fi"),
.f=pattern_detect)
genre
?here::here
?knitr::kable
# test %>%
#   bind_cols(pred_rating = test_pred) %>%
#   ggplot(aes(x=review_rating, y=pred_rating)) +
#   geom_point() +
#   geom_abline(slope=1, intercept=0) +
#   xlab("True Rating") + ylab("Predicted Rating")
tab <- data.frame(MSE = c(round(mean((train$review_rating - train_pred)^2),2),round(mean((test$review_rating - test_pred)^2),2)))
install.packages("rsconnect")
install.packages("rsconnect")
